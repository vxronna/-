В рамках вводной лабораторной работы мне предстояло познакомиться с несколькими функциональными языками программирования и остановиться на одном для дальнейшего изучения. Среди рассматриваемых вариантов были Haskell, Clojure, Erlang, Elixir, OCaml, Lisp и F#. После анализа я выбрал Clojure.
Причины выбора заключаются в следующем:
Clojure опирается на идеи Lisp, но при этом интегрируется с JVM, что позволяет использовать огромный набор библиотек и инструментов из мира Java.
В языке изначально заложена работа с неизменяемыми структурами данных и параллельными вычислениями. Такие механизмы как атомы, агенты и транзакционная память делают многопоточность гораздо более безопасной и предсказуемой.
Поддержка макросов и свойство homoiconicity позволяют писать выразительные встроенные DSL, что хорошо соответствует задачам курса.
Язык остаётся востребованным в промышленной разработке: его применяют для анализа данных, веб-приложений и сложных вычислительных систем.
От других языков я отказался по ряду причин. Haskell обладает сильной математической базой, но требует значительных усилий на освоение. Erlang и Elixir больше ориентированы на распределённые системы, чем на задачи DSL. OCaml и F# удобны для академических проектов, однако встречаются в индустрии реже. Классический Lisp интересен как источник идей, но в Clojure преимущества его синтаксиса сочетаются с практичностью JVM.
План лабораторной работы №4
Я собираюсь разработать eDSL для конечных автоматов. Особенность языка будет заключаться в том, что можно будет явно задавать невозможные и игнорируемые переходы между состояниями. Реализация должна позволять запускать автомат и экспортировать его описание в формате dot для визуализации средствами Graphviz. В качестве демонстрационного примера будет использован светофор, поскольку его состояния легко описать и удобно показать переходы на графе.
Инструменты
Среда выполнения — REPL Clojure на JVM.
Система сборки — Leiningen.
Автоформатирование — zprint.
Анализ кода — clj-kondo.
Тестирование — стандартная библиотека clojure.test.
Стиль кодирования — основан на руководстве по стилю Clojure и настройках автоформатирования.
Литература
Основной источник — Daniel Higginbotham, “Clojure for the Brave and True”. При подготовке я также использовал официальное руководство по Clojure, документацию Leiningen, clj-kondo и статьи сообщества по форматированию кода с помощью zprint.
